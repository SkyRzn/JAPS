diff --git a/dump1090.c b/dump1090.c
index 7fa5327..94c7508 100644
--- a/dump1090.c
+++ b/dump1090.c
@@ -3,18 +3,18 @@
  * Copyright (C) 2012 by Salvatore Sanfilippo <antirez@gmail.com>
  *
  * All rights reserved.
- * 
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
- * 
+ *
  *  *  Redistributions of source code must retain the above copyright
  *     notice, this list of conditions and the following disclaimer.
  *
  *  *  Redistributions in binary form must reproduce the above copyright
  *     notice, this list of conditions and the following disclaimer in the
  *     documentation and/or other materials provided with the distribution.
- * 
+ *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
@@ -804,7 +804,7 @@ int bruteForceAP(unsigned char *msg, struct modesMessage *mm) {
         aux[lastbyte] ^= crc & 0xff;
         aux[lastbyte-1] ^= (crc >> 8) & 0xff;
         aux[lastbyte-2] ^= (crc >> 16) & 0xff;
-        
+
         /* If the obtained address exists in our cache we consider
          * the message valid. */
         addr = aux[lastbyte] | (aux[lastbyte-1] << 8) | (aux[lastbyte-2] << 16);
@@ -1211,7 +1211,7 @@ void displayModesMessage(struct modesMessage *mm) {
                 printf("    Heading: %d", mm->heading);
             }
         } else {
-            printf("    Unrecognized ME type: %d subtype: %d\n", 
+            printf("    Unrecognized ME type: %d subtype: %d\n",
                 mm->metype, mm->mesub);
         }
     } else {
@@ -1267,7 +1267,7 @@ int detectOutOfPhase(uint16_t *m) {
  * When messages are out of phase there is more uncertainty in
  * sequences of the same bit multiple times, since 11111 will be
  * transmitted as continuously altering magnitude (high, low, high, low...)
- * 
+ *
  * However because the message is out of phase some part of the high
  * is mixed in the low part, so that it is hard to distinguish if it is
  * a zero or a one.
@@ -1298,6 +1298,11 @@ void applyPhaseCorrection(uint16_t *m) {
     }
 }
 
+int isPulse(uint16_t *m, int i)
+{
+	return (m[i-1] < m[i] && m[i] > m[i+1]);
+}
+
 /* Detect a Mode S messages inside the magnitude buffer pointed by 'm' and of
  * size 'mlen' bytes. Every detected Mode S message is convert it into a
  * stream of bits and passed to the function to display it. */
@@ -1315,7 +1320,7 @@ void detectModeS(uint16_t *m, uint32_t mlen) {
      * 1.0 - 1.5 usec: second impulse.
      * 3.5 - 4   usec: third impulse.
      * 4.5 - 5   usec: last impulse.
-     * 
+     *
      * Since we are sampling at 2 Mhz every sample in our magnitude vector
      * is 0.5 usec, so the preamble will look like this, assuming there is
      * an impulse at offset 0 in the array:
@@ -1337,26 +1342,39 @@ void detectModeS(uint16_t *m, uint32_t mlen) {
 
         if (use_correction) goto good_preamble; /* We already checked it. */
 
-        /* First check of relations between the first 10 samples
-         * representing a valid preamble. We don't even investigate further
-         * if this simple test is not passed. */
-        if (!(m[j] > m[j+1] &&
-            m[j+1] < m[j+2] &&
-            m[j+2] > m[j+3] &&
-            m[j+3] < m[j] &&
-            m[j+4] < m[j] &&
-            m[j+5] < m[j] &&
-            m[j+6] < m[j] &&
-            m[j+7] > m[j+8] &&
-            m[j+8] < m[j+9] &&
-            m[j+9] > m[j+6]))
-        {
-            if (Modes.debug & MODES_DEBUG_NOPREAMBLE &&
-                m[j] > MODES_DEBUG_NOPREAMBLE_LEVEL)
-                dumpRawMessage("Unexpected ratio among first 10 samples",
-                    msg, m, j);
-            continue;
-        }
+		if (!isPulse(m, i))
+			continue;
+		int j2;
+		printf(".");
+
+		if (isPulse(m, j+28)) { //ZK1
+			j2 = j+28;
+		} else if (isPulse(m, j+22)) { //ZK2
+			j2 = j+22;
+		} else if (isPulse(m, j+36)) { //ZK3
+			j2 = j+36;
+		} else if (isPulse(m, j+44)) { //ZK4
+			j2 = j+44;
+		} else
+			continue;
+
+		printf("+%d\n", j2);
+
+		high = (m[j] + m[j2])/2;
+		i = 0;
+
+		for (int jj = j+1; jj < j2; jj++) {
+			if (m[jj] > high) {
+				i = 1;
+				break;
+			}
+		}
+		if (i)
+			continue;
+
+		printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
+		continue;
+
 
         /* The samples between the two spikes must be < than the average
          * of the high spikes level. We don't test bits too near to
@@ -1435,13 +1453,13 @@ good_preamble:
         /* Pack bits into bytes */
         for (i = 0; i < MODES_LONG_MSG_BITS; i += 8) {
             msg[i/8] =
-                bits[i]<<7 | 
-                bits[i+1]<<6 | 
-                bits[i+2]<<5 | 
-                bits[i+3]<<4 | 
-                bits[i+4]<<3 | 
-                bits[i+5]<<2 | 
-                bits[i+6]<<1 | 
+                bits[i]<<7 |
+                bits[i+1]<<6 |
+                bits[i+2]<<5 |
+                bits[i+3]<<4 |
+                bits[i+4]<<3 |
+                bits[i+5]<<2 |
+                bits[i+6]<<1 |
                 bits[i+7];
         }
 
@@ -2091,10 +2109,10 @@ int hexDigitVal(int c) {
  * raw hex format like: *8D4B969699155600E87406F5B69F;
  * The string is supposed to be at the start of the client buffer
  * and null-terminated.
- * 
+ *
  * The message is passed to the higher level layers, so it feeds
  * the selected screen output, the network output and so forth.
- * 
+ *
  * If the message looks invalid is silently discarded.
  *
  * The function always returns 0 (success) to the caller as there is
